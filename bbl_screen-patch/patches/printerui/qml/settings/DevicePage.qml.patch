--- printer_ui-orig/printerui/qml/settings/DevicePage.qml
+++ printer_ui/printerui/qml/settings/DevicePage.qml
@@ -3,14 +3,45 @@
 import QtQml 2.12
 import UIBase 1.0
 import Printer 1.0
+import X1PlusNative 1.0
 
 import "qrc:/uibase/qml/widgets"
 import ".."
+import "../printer"
 
 Item {
 
     property var build: DeviceManager.build
     property var storage: DeviceManager.storage
+    property var isShield: DeviceManager.getSetting("cfw_shield", false)
+    property var changeName:""
+    function setShield(shield) {
+        isShield = shield;
+        DeviceManager.putSetting("cfw_shield", isShield);
+        if (shield) {
+            X1PlusNative.system(`/etc/init.d/S71x1plus_shield start`);
+            console.log("[x1p] shield mode enabled");
+        } else {
+            X1PlusNative.system(`/etc/init.d/S71x1plus_shield stop`);
+            console.log("[x1p] shield mode disabled");
+        }
+    }
+    
+    Timer {
+        id: waitSyncTimer
+        interval: 3000
+        repeat: true
+        running: false
+        onTriggered: {
+            if (NetworkManager.lanOnlySyncing)
+                return;
+            /* done syncing, go reboot into shield mode */
+            X1PlusNative.system(`sync;reboot`);
+        }
+    }
+    function waitSyncAndReboot() {
+        waitSyncTimer.start();
+    }
 
     onVisibleChanged: {
         DeviceManager.activeDeviceInfos(DeviceManager.DI_Storage, visible)
@@ -18,6 +49,7 @@
 
     property var infoItems: SimpleItemModel {
         DeviceInfoItem { title: qsTr("Device"); value: build.name
+            property var onClicked: triggerName
         }
         DeviceInfoItem { title: qsTr("Language"); value: DeviceManager.languageTitle
             function onClicked() {
@@ -27,8 +59,8 @@
                 choisePad.choiseCallback = function(c) { DeviceManager.languageTitle = c }
                 choisePad.popupFor()
             } }
-        DeviceInfoItem { title: qsTr("Firmware Version"); value: build.version
-            dot: DeviceManager.updater.hasNewVersion || DeviceManager.updater.consistency
+        DeviceInfoItem { title: qsTr("Firmware Version"); value: screenSaver.fwVersion
+            dot: screenSaver.fwIsBusted
             property var onClicked: triggerVersion
         }
         DeviceInfoItem { title: qsTr("Video"); value: models[number]
@@ -52,111 +84,23 @@
                 }
                 choisePad.popupFor()
             } }
-        DeviceInfoItem { title: qsTr("Auto-Sleep"); value: modelNames[DeviceManager.power.mode]
-            property var modelNames: [qsTr("2min"), qsTr("5min"), qsTr("10min"), qsTr("15min")]
-            function onClicked() {
-                choisePad.name = "powerModePad"
-                choisePad.choiseModel = modelNames
-                choisePad.choise = choisePad.choiseModel[DeviceManager.power.mode]
-                choisePad.choiseCallback = function(m) { DeviceManager.power.mode = choisePad.choiseModel.indexOf(m) }
-                choisePad.popupFor()
-            } }
-//        DeviceInfoItem { title: qsTr("Theme"); value: Colors.dayNightMode ? qsTr("Dark") : qsTr("Light")
-//            function onClicked() { Colors.dayNightMode = !Colors.dayNightMode }}
-//        DeviceInfoItem { title: qsTr("Model Name"); value: build.product }
+        DeviceInfoItem { title: qsTr("Screen lock"); value: [qsTr("2min"), qsTr("5min"), qsTr("10min"), qsTr("15min")][DeviceManager.power.mode] + ", " + ["screen saver", "swipe to unlock", "passcode"][DeviceManager.getSetting("cfw_locktype", 0)]
+            function onClicked() { pageStack.push("ScreenLockPage.qml") }
+        }
         DeviceInfoItem { title: qsTr("Device info"); value: build.seriaNO
-            function onClicked() { pageStack.push("DeviceInfoPage.qml") }
+            function onClicked() { pageStack.push("DeviceInfo.qml") }
         }
-//        DeviceInfoItem { title: qsTr("Certification"); value: ""
-//            function onClicked() { certPanel.visible = true }
-//        }
-        DeviceInfoItem { title: qsTr("Export Log to SD Card"); value: ""
-            property var onClicked: exportLog }
-        DeviceInfoItem { title: qsTr("Restore Factory Settings"); value: ""
-            property var onClicked: restoreFactorySettings }
     }
 
-    function triggerVersion() {
-        if (DeviceManager.updater.consistency
-                && PrintManager.currentTask.stage < PrintTask.WORKING) {
-            dialogStack.popupDialog(
-                        "TextConfirm", {
-                            name: "Version notify",
-                            type: TextConfirm.YES_NO,
-                            text: qsTr("The firmware version is abnormal. Repair and update are required, otherwise the printing cannot be started. Do you want to update now?"),
-                            onYes: function(index) { DeviceManager.startUpdate() },
-                            onNo: function(index) { pageStack.push("VersionPage.qml") }
-                        })
-            return
-        }
-        pageStack.push("VersionPage.qml")
-    }
-
-    function formatStorage() {
-        var format = function() {
-            if (!DeviceManager.formatStorage())
-                return
-            dialogStack.popupDialog("WorkProgress", {
-                                 name: "Format storage",
-                                 message: qsTr("Formatting..."),
-                                 finished: Qt.binding(function() {
-                                     return !DeviceManager.storage.internal
-                                 })
-                             })
-        }
+    function triggerName() {
         dialogStack.popupDialog("TextConfirm", {
-                             name: "Format storage",
-                             text: qsTr("Data cannot be recovered after formatting the SD Card. Are you sure you want to format?"),
-                             titles: [qsTr("Format"), qsTr("Cancel")],
-                             onYes: format
+                             name: "Device name",
+                             text: qsTr("To change the name of your device, please use the slicer or the Bambu app."),
+                             type: TextConfirm.CONFIRM
                          })
     }
-
-    function exportLog() {
-        var export_ = function(index) {
-//            if (!DeviceManager.exportSystemLog())
-//                return
-            dialogStack.popupDialog("WorkProgress", {
-                                 name: "Export log",
-                                 message: qsTr("Exporting system log..."),
-                                 finished: Qt.binding(function() {
-                                     return !DeviceManager.exportingSystemLog
-                                 })
-                             })
-        }
-        dialogStack.popupDialog("ExportLog", {
-                             name: "Export log",
-                             text: qsTr("Exporting the system logs takes about 1GB of space and will last about 3 minutes. Make sure that the SD card has been inserted and that there is enough space left, do not insert or remove the SD card during the export process."),
-                             titles: [qsTr("Cancel"), qsTr("Export")],
-                             defaultButton: TextConfirm.NO,
-                             onExport: export_
-                         })
-    }
-
-    function restoreFactorySettings() {
-        var restore = function() {
-            DeviceManager.restoreFactorySettings()
-            dialogStack.popupDialog("WorkProgress", {
-                                 name: "Restore factory settings",
-                                 message: qsTr("Restoring factory settings..."),
-                                 finished: Qt.binding(function() {
-                                     return !DeviceManager.restoringFactorySettings
-                                 })
-                             })
-        }
-        if (PrintManager.currentTask.stage >= PrintTask.WORKING) {
-            dialogStack.popupDialog("TextConfirm", {
-                                        name: "Restore factory settings during printing",
-                                        text: qsTr("Restoring factory settings is not supported during printing."),
-                                        type: TextConfirm.CONFIRM
-                                    })
-        } else {
-            dialogStack.popupDialog("TextConfirm", {
-                                        name: "Restore factory settings",
-                                        text: "<p>" + qsTr("Are you sure to restore factory settings?") + "</p>" + "<font color=\"#FF6F00\">" + qsTr("\nPlease move the hot bed to the central position before restoring the factory settings.") + "</font>",
-                                        onYes: restore
-                                    })
-        }
+    function triggerVersion() {
+        pageStack.push("VersionPage.qml")
     }
 
     MarginPanel {
@@ -170,7 +114,7 @@
             id: sdIdStorage
             x:20
             y:15
-            width: 245
+            width: parent.width-40
             height: 155
             marginColor: "transparent"
             rightRadiusOff: true
@@ -199,7 +143,7 @@
 
             ZProgressBar {
                 id: sdProgressBar
-                width: 185
+                width: 403
                 height: 8
                 type: ZProgressBarAppearance.Secondary
                 size: ZProgressBarAppearance.Middle
@@ -213,30 +157,6 @@
         }
 
         MarginPanel {
-            id: formatSD
-            width: 187
-            height: 155
-            anchors.left: parent.left
-            anchors.leftMargin: 241+20
-            anchors.top: sdIdStorage.top
-            marginColor: "transparent"
-            leftRadiusOff: true
-            color: formatBtn.color
-
-            ZButton {
-                id: formatBtn
-                anchors.fill: parent
-                type: ZButtonAppearance.Tertiary
-                backgroundColor: StateColors.get("gray_600_pressed")
-                textColor: StateColors.get("gray_300")
-                text: qsTr("Format")
-                onClicked: {
-                    formatStorage()
-                }
-            }
-        }
-
-        MarginPanel {
             id: video
             width: 426
             height: 186
@@ -311,7 +231,7 @@
         MarginPanel {
             id: lanOnly
             width: 426
-            height: 178
+            height: 220
             anchors.top: sdIdStorage.bottom
             anchors.topMargin: 16
             anchors.left: sdIdStorage.left
@@ -322,35 +242,50 @@
             Text {
                 id: lanOnlyText
                 anchors.top: parent.top
-                anchors.topMargin: 30
+                anchors.topMargin: 25
                 anchors.left: parent.left
                 anchors.leftMargin: 24
                 color: Colors.gray_100
-                font: Fonts.body_30
-                text: qsTr("LAN Only")
+                font: Fonts.body_28
+                text: qsTr("Network")
             }
 
-            ZSwitchButton {
-                id: lanOnlyButton
-                anchors.right: line1.right
-                anchors.top: lanOnlyText.top
-                dynamicChecked: NetworkManager.isLanOnly
-                enabled: !NetworkManager.lanOnlySyncing
-                onToggled: {
-                    if (checked) {
-                        var checked2 = checked
+            /* NetworkManager.isLanOnly */
+            /* NetworkManager.lanOnlySyncing is true when busy */
+            Choise {
+                id: choiceLanOnly
+                anchors.right: parent.right
+                anchors.rightMargin: 25
+                anchors.verticalCenter: lanOnlyText.verticalCenter
+                width: right - lanOnlyText.right - 25
+                textFont: Fonts.body_26
+                listTextFont: Fonts.body_28
+                backgroundColor: Colors.gray_500
+                model: ["Bambu cloud", "LAN         " /* freaking QML */, "LAN + shield"]
+                currentIndex: !NetworkManager.isLanOnly ? 0 : !isShield ? 1 : 2
+                readOnly: NetworkManager.lanOnlySyncing
+                onChoiseTapped: {
+                    var expectedIndex = !NetworkManager.isLanOnly ? 0 : !isShield ? 1 : 2;
+                    if (currentIndex == expectedIndex) {
+                        return;
+                    }
+                    if (currentIndex == 0) {
+                        setShield(false);
+                        NetworkManager.isLanOnly = false;
+                    } else if (currentIndex == 1) {
                         dialogStack.popupDialog(
                                     "TextConfirm", {
                                         name: "Turn off LAN Only",
-                                        text: qsTr("Enabling LAN Only mode will disconnect all Bambu Studio and Bambu Handy connected to the device. Do you want to continue?"),
+                                        text: qsTr("Enabling LAN mode will disconnect all Bambu Studio and Bambu Handy connected to the device. Do you want to continue?"),
                                         defaultButton: 1,
                                         onYes: function() {
-                                            NetworkManager.isLanOnly = checked2
+                                            setShield(false);
+                                            NetworkManager.isLanOnly = true;
                                             if (!RecordManager.rtspServerOn) {
                                                 dialogStack.popupDialog(
                                                             "TextConfirm", {
                                                                 name: "rtsp server on",
-                                                                text: qsTr("Do you need to open LAN Mode Liveview?"),
+                                                                text: qsTr("Do you want to turn on the LAN live view server?"),
                                                                 defaultButton: 0,
                                                                 onYes: function() {
                                                                     rtspServerBtn.checked = true
@@ -358,27 +293,62 @@
                                                                 }
                                                             })
                                             }
+                                        },
+                                        onNo: function() {
+                                            currentIndex = 0;
+                                            choiseTapped();
                                         }
                                     })
                     } else {
-                        NetworkManager.isLanOnly = checked
+                        dialogStack.popupDialog(
+                                    "TextConfirm", {
+                                        name: "Enter shield mode",
+                                        text: qsTr("X1Plus Shield Mode is an enhancement to LAN mode that uses iptables to block outbound connections from the printer.  You will still be able to connect to the printer via FTP and MQTT, but the printer will not be able to download toolhead firmware.  Enabling shield mode requires restarting your printer.  Enable now?"),
+                                        defaultButton: 0,
+                                        titles :[ qsTr("Enable shield and restart"), qsTr("Enable LAN mode only") ],
+                                        onYes: function() {
+                                            setShield(true);
+                                            NetworkManager.isLanOnly = true;
+                                            waitSyncAndReboot();
+                                        },
+                                        onNo: function() {
+                                            currentIndex = 1;
+                                            choiseTapped();
+                                        }
+                                    })
                     }
                 }
             }
 
-            ZLineSplitter {
-                id: line1
-                alignment: Qt.AlignTop
-                padding: 24
-                offset: 86
-                color: Colors.gray_400
+            Text {
+                id: rtspServerTx
+                anchors.left: lanOnlyText.left
+                anchors.top: choiceLanOnly.bottom
+                anchors.topMargin: 20
+                font: Fonts.body_28
+                color: Colors.gray_100
+                width: 310
+                wrapMode: Text.WordWrap
+                text: qsTr("LAN Only Liveview")
+            }
+
+            ZSwitchButton {
+                id: rtspServerBtn
+                anchors.verticalCenter: rtspServerTx.verticalCenter
+                anchors.right: parent.right
+                anchors.rightMargin: 25
+                dynamicChecked: RecordManager.rtspServerOn
+                enabled: !RecordManager.syncingRtspServer
+                onToggled: {
+                    RecordManager.rtspServerOn = checked
+                }
             }
 
             ZText {
                 id: accessCodeText
                 maxWidth: 320
-                anchors.top: line1.top
-                anchors.topMargin: 28
+                anchors.top: rtspServerBtn.bottom
+                anchors.topMargin: 25
                 anchors.left: lanOnlyText.left
                 color: Colors.gray_100
                 font: Fonts.head_24
@@ -392,8 +362,7 @@
                 radius: width / 2
                 anchors.top: accessCodeText.top
                 anchors.topMargin: -12
-                anchors.right: line1.right
-                anchors.rightMargin: 10
+                anchors.horizontalCenter: rtspServerBtn.horizontalCenter
                 type: ZButtonAppearance.Secondary
                 iconPosition: ZButtonAppearance.Center
                 paddingX: 0
@@ -419,9 +388,9 @@
         }
 
         MarginPanel {
-            id: rtspServer
+            id: enableSsh
             width: 426
-            height: 108
+            height: 160
             anchors.top: lanOnly.bottom
             anchors.topMargin: 16
             anchors.left: lanOnly.left
@@ -430,28 +399,84 @@
             marginColor: "transparent"
 
             Text {
-                id: rtspServerTx
+                id: enableSshTx
                 anchors.left: parent.left
-                anchors.leftMargin: 30
-                anchors.verticalCenter: parent.verticalCenter
-                font: Fonts.body_24
+                anchors.leftMargin: 24
+                anchors.top: parent.top
+                anchors.topMargin: 20
+                font: Fonts.body_28
                 color: Colors.gray_100
                 width: 310
                 wrapMode: Text.WordWrap
-                text: qsTr("LAN Only Liveview")
+                text: qsTr("Enable SSH Server")
             }
 
             ZSwitchButton {
-                id: rtspServerBtn
+                id: enableSshBtn
                 anchors.right: parent.right
                 anchors.rightMargin: 24
-                anchors.verticalCenter: parent.verticalCenter
-                dynamicChecked: RecordManager.rtspServerOn
-                enabled: !RecordManager.syncingRtspServer
+                anchors.verticalCenter: enableSshTx.verticalCenter
+                dynamicChecked: DeviceManager.getSetting("cfw_sshd", false)
                 onToggled: {
-                    RecordManager.rtspServerOn = checked
+                    DeviceManager.putSetting("cfw_sshd", checked)
+                    dynamicChecked = checked
+                    if (checked) {
+                        X1PlusNative.system(`/etc/init.d/S70x1plus_sshd start`);
+                    } else {
+                        X1PlusNative.system(`/etc/init.d/S70x1plus_sshd stop`);
+                    }
                 }
             }
+            
+            ZText {
+                property var rootpw: DeviceManager.getSetting("cfw_rootpw", "")
+                function regenRootPw() {
+                    var newpw = X1PlusNative.popen(`dd if=/dev/urandom bs=10 count=1 | md5sum | cut -c 1-12`); // now THAT is cheesy!
+                    DeviceManager.putSetting("cfw_rootpw", newpw);
+                    rootpw = newpw;
+                    X1PlusNative.system(`/etc/init.d/S70x1plus_sshd new_password`);
+                }
+            
+                id: rootpwText
+                maxWidth: 320
+                anchors.top: enableSshTx.bottom
+                anchors.topMargin: 28
+                anchors.left: enableSshTx.left
+                color: Colors.brand
+                font: Fonts.body_24
+                text: qsTr("Root password: ") + "<br><font size=\"4\" color=\"#00AE42\">" + (rootpw == "" ? "[not yet set]" : rootpw) + "</font>"
+            }
+
+            ZButton {
+                id: refreshRootPwBtn
+                width: 46
+                height: width
+                radius: width / 2
+                anchors.horizontalCenter: enableSshBtn.horizontalCenter
+                anchors.verticalCenter: rootpwText.verticalCenter
+                type: ZButtonAppearance.Secondary
+                iconPosition: ZButtonAppearance.Center
+                paddingX: 0
+                iconSize: 46
+                textColor: StateColors.get("gray_100")
+                icon: "../../icon/refresh.svg"
+                onClicked: {
+                    rootpwText.regenRootPw()
+                    rootpwRotationId.start()
+                }
+
+                RotationAnimation {
+                    id: rootpwRotationId
+                    target: refreshRootPwBtn.iconItem
+                    property: "rotation"
+                    loops: 1
+                    alwaysRunToEnd: true
+                    duration: 1000
+                    from: 0
+                    to: 360
+                }
+            }
+
         }
     }
 
