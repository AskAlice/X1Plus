import os
import time
import random
import argparse

x = [
	25.0,66.2,107.4,148.6,189.8,231.0
]
y = [
	25.0,67.2,109.4,151.6,193.8,236.0
]


a_values = [
	0.677,0.392,0.324,0.415,0.113,-0.024,0.335,0.644,0.968,1.226,1.411,1.49,1.607,1.66,2.012,2.28,2.387,2.56,2.774,2.982,3.13,3.394,3.684,3.918,4.127,4.514,4.932,5.443,6,6.572,7.091,7.27,7.624,8.027,8.48,9.159,9.88,10.713,11.43,12.099,13.08,14.169,15.084,16.183,16.653,16.221,15.151,14.311,14.121,14.172,13.642,12.633,11.569,10.502,9.454,8.676,8.01,7.397,6.747,6.175,5.613,5.072,4.537,3.969,3.482,3.041,2.65,2.319,2.024,1.813,1.5,1.205,0.903,0.596,0.318,-0.003,-0.268,-0.462,-0.673,-0.877,-1.064,-1.192,-1.366,-1.806,-2.212,-2.517,-2.827,-3.037,-3.335,-3.584,-3.918,-4.105,-4.39,-4.788,-5.32,-5.848,-6.282,-6.722,-6.976,-7.123,-7.281,-7.5,-7.624,-7.801,-8.005,-8.117,-8.241,-8.377,-8.477,-8.554,-8.641,-8.738,-8.856,-8.923,-9.023,-9.125,-9.157,-9.27,-9.306,-9.354,-9.476,-10.28,-10.279,-10.272,-10.258,-10.288,-10.27,-10.353,-10.346,-10.333,-10.377,-10.393,-10.362,-10.332,-10.34,-10.428,-10.299,-10.267,-10.168,-10.173,-10.107,-10.08,-9.99,-9.862,-9.838,-9.74,-9.542,-9.363,-9.222,-9.489,-10.02,-9.691,-9.581,-9.532,-9.444,-9.341,-9.324,-9.393,-9.373,-9.263,-9.091,-8.982,-8.849,-8.615,-8.436,-8.392,-9.446,-8.988,-8.624,-8.326,-8.219,-7.995,-7.802,-7.149,-6.872,-6.645,-6.452,-6.245,-5.992,-5.77,-5.513,-5.36,-5.072,-4.774,-4.504,-4.151,-3.849,-3.462,-3.126,-2.764,-2.27,-1.908,-1.406,-0.844,-0.238,0.558,1.25,1.796,2.627,3.107,3.506,3.558,3.704,3.593,3.435,3.221,2.989,2.731,2.35,2.054,1.603,1.148,0.927,0.487,0.07,-0.316,-0.696,-1.241,-1.626,-2.123,-2.564,-2.994,-3.589,-3.943,-4.428,-4.715,-5.044,-5.466,-5.805,-6.122,-6.422,-6.765,-7.014,-7.325,-7.487,-7.605,-7.803,-8.103,-8.297,-8.479,-8.384,0.507,0.553,0.63,0.575,0.428,0.371,0.514,0.666,0.796,0.679,0.406,0.548,0.649,0.663,0.773,0.904,1.054,1.229,1.38,1.533,1.69,1.838,2.023,2.185,2.29,2.434,2.602,2.797,2.961,3.174,3.439,3.677,3.932,4.235,4.529,4.775,5.017,5.38,5.821,6.263,6.971,7.659,8.286,8.923,9.607,10.414,11.372,12.623,14.135,15.656,16.496,16.577,16.054,15.178,14.241,13.158,12.141,11.136,10.2,9.177,8.302,7.305,6.357,5.531,4.597,3.742,2.943,2.106,1.393,0.575,-0.156,-0.802,-1.377,-1.93,-2.379,-2.807,-3.133,-3.606,-4.285,-5.241,-6.159,-6.741,-7.051,-7.27,-7.489,-7.572,-7.651,-7.851,-8.308,-8.833,-9.515,-10.047,-10.723,-11.318,-11.721,-12.199,-12.608,-13.163,-13.757,-14.135,-14.831,-15.397,-15.959,-17.015,-17.425,-18.453,-19.42,-20.111,-21.194,-22.469,-24.867,-24.768,-27.288,-30.324,-32.418,-36.256,-33.237,-31.39,-27.488,-26.864,-47.812,-33.746,-32.137,-31.216,-30.941,-29.509,-29.15,-32.395,-30.502,-32.38,-32.452,-32.873,-34.601,-35.376,-35.271,-34.121,-41.377,-45.306,-52.421,-48.908,-39.787,-38.017,-34.593,-31.568,-36.543,-43.845,-45.735,-41.715,-40.518,-42.382,-44.421,-41.504,-41.292,-39.149,-39.794,-37.978,-37.256,-36.794,-36.532,-36.095,-37.201,-37.52,-38.929,-37.456,-37.319,-37.278,-36.563,-35.962,-35.589,-35.109,-34.819,-34.062,-34.727,-35.524,-35.645,-36.707,-38.541,-41.299,-41.383,-40.457,-38.528,-38.176,-36.876,-35.873,-36.65,-35.058,-36.438,-36.883,-36.476,-39.038,-41.034,-41.261,-46.033,-40.802,-37.343,-35.573,-35.873,-36.601,-37.995,-39.03,-36.123,-36.7,-35.984,-34.972,-35.904,-33.906,-34.819,-31.601,-31.283,-29.276,-29.128,-29.342,-29.443,-29.797,-30.251,-31.322,-33.653,-33.105,-32.901,-33.456,-33.246,-33.12,-32.743,-31.155,-30.856,-30.182,-29.158,-29.278,-29.329,-27.542,-26.64,-26.768,-26.91,-26.313,-25.702,-25.163,-25.571,-25.361,-25.184,-24.948,-24.654
]
ph_values = [
	-0.119,-0.137,-0.131,-0.117,-0.144,-0.102,-0.081,-0.085,-0.098,-0.116,-0.139,-0.157,-0.175,-0.178,-0.172,-0.2,-0.214,-0.225,-0.239,-0.252,-0.262,-0.27,-0.29,-0.313,-0.321,-0.327,-0.334,-0.351,-0.375,-0.401,-0.441,-0.464,-0.493,-0.533,-0.553,-0.578,-0.621,-0.683,-0.771,-0.842,-0.89,-0.991,-1.15,-1.371,-1.643,-1.889,-2.098,-2.173,-2.232,-2.381,-2.56,-2.711,-2.815,-2.893,-2.942,-2.996,-3.047,-3.091,-3.131,3.117,3.079,3.037,2.995,2.964,2.951,2.933,2.923,2.918,2.905,2.896,2.882,2.866,2.846,2.838,2.829,2.81,2.804,2.797,2.781,2.769,2.741,2.711,2.671,2.634,2.613,2.592,2.57,2.553,2.534,2.511,2.461,2.419,2.391,2.364,2.355,2.362,2.346,2.371,2.397,2.412,2.425,2.434,2.441,2.446,2.453,2.469,2.475,2.478,2.478,2.47,2.454,2.462,2.466,2.465,2.46,2.459,2.454,2.45,2.452,2.448,2.429,2.438,2.453,2.44,2.44,2.429,2.417,2.414,2.401,2.401,2.393,2.395,2.381,2.38,2.381,2.37,2.365,2.358,2.359,2.346,2.346,2.345,2.336,2.315,2.315,2.324,2.308,2.295,2.26,2.21,2.254,2.262,2.256,2.249,2.24,2.227,2.215,2.204,2.221,2.209,2.196,2.19,2.186,2.169,2.141,2.08,2.043,2.182,2.158,2.145,2.13,2.12,2.116,2.144,2.148,2.136,2.12,2.112,2.098,2.072,2.056,2.044,2.027,2.015,1.986,1.962,1.946,1.915,1.885,1.86,1.825,1.792,1.729,1.691,1.628,1.541,1.432,1.365,1.166,1.022,0.934,0.842,0.699,0.6,0.511,0.419,0.343,0.274,0.192,0.159,0.092,0.024,-0.003,-0.057,-0.106,-0.164,-0.199,-0.232,-0.282,-0.313,-0.348,-0.375,-0.405,-0.427,-0.445,-0.479,-0.494,-0.529,-0.553,-0.571,-0.571,-0.581,-0.604,-0.617,-0.639,-0.645,-0.648,-0.661,-0.684,-0.713,-0.712,-0.05,-0.069,-0.097,-0.124,-0.129,-0.121,-0.122,-0.138,-0.17,-0.207,-0.202,-0.195,-0.204,-0.203,-0.195,-0.202,-0.211,-0.221,-0.234,-0.247,-0.259,-0.271,-0.286,-0.302,-0.316,-0.327,-0.338,-0.351,-0.365,-0.382,-0.399,-0.418,-0.435,-0.455,-0.477,-0.5,-0.513,-0.526,-0.54,-0.557,-0.582,-0.605,-0.639,-0.676,-0.723,-0.772,-0.821,-0.905,-1.066,-1.301,-1.581,-1.859,-2.106,-2.293,-2.454,-2.569,-2.661,-2.727,-2.78,-2.829,-2.865,-2.912,-2.948,-2.983,-3.002,-3.012,-3.025,-3.039,-3.056,-3.065,-3.086,-3.105,-3.119,-3.133,3.134,3.117,3.085,3.041,2.951,2.836,2.661,2.528,2.433,2.349,2.284,2.213,2.142,2.097,2.066,2.043,2.025,2.014,2.006,1.997,1.988,1.979,1.959,1.938,1.914,1.887,1.868,1.843,1.833,1.836,1.798,1.813,1.791,1.76,1.764,1.843,1.761,1.741,1.695,1.784,1.92,-2.994,-2.986,-2.904,-2.961,2.684,2.608,2.993,-2.799,-2.693,-2.764,-2.83,3.118,2.952,-2.958,-3.01,-3.028,-3.062,2.923,2.894,2.651,1.759,1.367,1.121,0.569,-1.365,-1.476,-1.693,-1.802,-1.923,-2.339,0.261,-1.438,-1.062,-1.324,-1.594,-1.626,-1.425,-1.576,-1.543,-1.435,-1.485,-1.482,-1.689,-1.716,-1.981,-2.175,-2.204,-2.166,-2.066,-1.967,-1.908,-2.005,-2.036,-2.14,-2.085,-2.171,-2.301,-2.316,-2.422,-2.463,-2.426,-2.545,-2.464,-2.332,-2.266,-2.18,-2.224,-2.097,-2.194,-2.362,-2.353,-2.401,-2.579,-2.541,-2.681,-2.359,-2.785,-1.72,-1.147,-1.723,-2.061,-2.142,-1.803,-1.913,-1.846,-1.73,-1.586,-1.477,-1.5,-1.343,-1.497,-1.44,-1.684,-1.856,-1.983,-2.146,-2.257,-2.371,-2.512,-2.631,-2.657,-2.582,-2.641,-2.597,-2.495,-2.383,-2.278,-2.376,-2.258,-2.287,-2.211,-2.258,-2.381,-2.374,-2.518,-2.425,-2.518,-2.477,-2.549,-2.486,-2.567,-2.767,-2.669,-2.812,-2.794,-2.832
]
blah_dict = {
    1: [
        "[BMC]1st order mech mode identify success.",
        "[BMC]wn54.0,ksi0.080,pk17.0,l49.0,h58.0",
        "[BMC]axis_1 1st mode is normal",
    ],
    2: [
        "[BMC]1st order mech mode identify success.",
        "[BMC]wn177.0,ksi0.170,pk4.0,l149.0,h211.0",
    ],
    3: [
        "[BMC]1st order mech mode identify success.",
        "[BMC]wn61.0,ksi0.050,pk17.0,l56.0,h63.0",
        "[BMC]axis_0 1st mode is normal",
    ],
    4: [
        "[BMC]1st order mech mode identify failed...",
        "[BMC]wn0.0,ksi0.260,pk0.0,l145.0,h147.0",
        "[BMC] M975 S1",
    ],
}
def vibration():
    i = 10
    j = 0
    for a, ph in zip(a_values, ph_values):
        bmc = f"[MCU][BMC]f={i}.000, a={a}, ph={ph}, err 100"
        print(bmc)
        os.system(f"logger {bmc}")
        time.sleep(0.5)
        if i == 130 or (i == 250 and j > 1):
            j += 1
            if j in blah_dict:
                for line in blah_dict[j]:
                    print(line)
                    os.system(f"logger {line}")
                    time.sleep(0.5)
        if i == 250:
            i = 10
        else:
            i += 1

def mesh():
    x_values = [
        25.0, 66.2, 107.4, 148.6, 189.8, 231.0
    ]
    y_values = [
        25.0, 67.2, 109.4, 151.6, 193.8, 236.0
    ]
    for _y in y_values:
        for _x in x_values:
            bmc = f"[BMC] X{_x} Y{_y},z_c={round(random.uniform(-0.5, 0.5),2)},z_d={round(random.uniform(-0.5, 0.5),2)}"
            print(bmc)
            os.system(f"logger {bmc}")
            time.sleep(0.5)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Create fake data and log it to syslog.")
    parser.add_argument("emulation", type=int, help="options: 0 for mesh or 1 for vibration")

    args = parser.parse_args()

    if args.emulation == 0:
        mesh()
    elif args.emulation == 1:
        vibration()